
# test function
void function myfunc3(a: num, b: num, c: num)
{
    #num[][][] q = (new [(a)][(b)][(c)]);
    #q[(1)][(2)][1] = (5);
    #num[] u = new [5];
    #{
    #	num[] u = new[7];
#	u[1] = 3 + (-2);
    #};
    #u = q[1][2];
}
num function myfunc(a: num, b: num, c: num)
{
    local num[][][] z = (new [(a)][(b)][(c)]);
    z[(1)][(2)][(1)] = (5);
    num y = (100);
    num x = 1500;
    (void) (x);
    return (y)+(z[(1)][(2)][(1)]);
}
num function myfunc2(a: num, b: num)
{
	num i = (10);
	do {
		@i;
		i = ((i) - (1));
	} while (((i) >= (10)));
	return ((600));
}
num function factorial(n: num, last: num = 2)
{
	if (((n) == (0))) {
		return (last);
	} else {
		return (n) * (factorial((n-1), (last)));
	};
}
num function main()
{
   (void) myfunc3((1),(2),(3));
   @(myfunc((1),(2),(3)));
   @((myfunc2((4), 2)));
   return (factorial(6));
}
